smetchappy

xa7Zh8RHGqkdGt6


mongodb+srv://smetchappy:xa7Zh8RHGqkdGt6@cluster0.jbnhw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0

mongodb+srv://smetchappy:Egd8lV7C8J5mcymM@backeddb.pmksk.mongodb.net/Photos?retryWrites=true&w=majority&appName=BackedDB



const express = require('express');
const mongoose = require('mongoose');
const session = require('express-session');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const app = express();

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: process.env.NODE_ENV === 'production' }
}));

// MongoDB Connection
mongoose.connect('mongodb+srv://smetchappy:Egd8lV7C8J5mcymM@backeddb.pmksk.mongodb.net/Photos?retryWrites=true&w=majority&appName=BackedDB', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
}).catch(err => {
    console.error('Error connecting to MongoDB', err);
});

// User Schema
const userSchema = new mongoose.Schema({
    names: {
        type: String,
        required: true
    },
    surname: {
        type: String,
        required: true
    },
    idNumber: {
        type: String,
        required: true,
        unique: true
    },
    wardNumber: {
        type: String,
        required: true
    },
    suburb: {
        type: String,
        required: true
    },
    town: {
        type: String,
        required: true
    },
    postalCode: {
        type: String,
        required: true
    },
    password: {
        type: String,
        required: true
    }
}, { timestamps: true });

const User = mongoose.model('User', userSchema);

// JWT Middleware
const verifyToken = (req, res, next) => {
    const token = req.session.token || req.headers['authorization'];
    if (!token) {
        return res.status(403).json({ message: "No token provided" });
    }
    try {
        const decoded = jwt.verify(token, 'your-jwt-secret');
        req.user = decoded;
        next();
    } catch (err) {
        return res.status(401).json({ message: "Unauthorized" });
    }
};

// GET route for signup page
app.get('/signup', (req, res) => {
    res.send(`
        <form action="/signup" method="post">
            <input type="text" name="names" placeholder="Names" required/>
            <input type="text" name="surname" placeholder="Surname" required/>
            <input type="text" name="idNumber" placeholder="ID Number" required/>
            <input type="text" name="wardNumber" placeholder="Ward Number" required/>
            <input type="text" name="suburb" placeholder="Suburb" required/>
            <input type="text" name="town" placeholder="Town" required/>
            <input type="text" name="postalCode" placeholder="Postal Code" required/>
            <input type="password" name="password" placeholder="Password" required/>
            <button type="submit">Sign Up</button>
        </form>
    `);
});

// POST route for signup
app.post('/signup', async (req, res) => {
    try {
        const {
            names,
            surname,
            idNumber,
            wardNumber,
            suburb,
            town,
            postalCode,
            password
        } = req.body;

        // Check if user already exists
        const existingUser = await User.findOne({ idNumber });
        if (existingUser) {
            return res.status(400).json({ message: "User already exists" });
        }

        // Hash password
        const hashedPassword = await bcrypt.hash(password, 10);

        // Create new user
        const newUser = new User({
            names,
            surname,
            idNumber,
            wardNumber,
            suburb,
            town,
            postalCode,
            password: hashedPassword
        });

        await newUser.save();

        // Create JWT token
        const token = jwt.sign(
            { userId: newUser._id, idNumber: newUser.idNumber },
            'your-jwt-secret',
            { expiresIn: '24h' }
        );

        // Store token in session
        req.session.token = token;

        res.status(201).json({
            message: "User created successfully",
            token
        });

    } catch (err) {
        console.error(err);
        res.status(500).json({ message: "Error creating user", error: err.message });
    }
});

// Protected route example
app.get('/profile', verifyToken, async (req, res) => {
    try {
        const user = await User.findById(req.user.userId).select('-password');
        res.json(user);
    } catch (err) {
        res.status(500).json({ message: "Error fetching profile" });
    }
});

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});

-----------------------------



